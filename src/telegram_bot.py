import asyncio
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from .config import Config
from .logger import get_logger
from .bot_manager import BotManager
from .resource_monitor import ResourceMonitor

logger = get_logger(__name__)

class TelegramBot:
    def __init__(self, config: Config, bot_manager: BotManager, resource_monitor: ResourceMonitor):
        self.config = config
        self.bot_manager = bot_manager
        self.resource_monitor = resource_monitor
        
        # Application —Å post_init
        self.app: Application = (
            Application.builder()
            .token(config.TELEGRAM_BOT_TOKEN)
            .post_init(self._post_init)
            .build()
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self._cmd_start))
        self.app.add_handler(CommandHandler("help", self._cmd_help))
        self.app.add_handler(CommandHandler("status", self._cmd_status))
        self.app.add_handler(CommandHandler("bots", self._cmd_bots))
        self.app.add_handler(CommandHandler("resources", self._cmd_resources))
        self.app.add_handler(CommandHandler("setup", self._cmd_setup))
        self.app.add_handler(CommandHandler("logs", self._cmd_logs))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CallbackQueryHandler(self._handle_callback))
        
    async def _post_init(self, app: Application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.app.initialize()
            await self.app.updater.start_polling()
            await self.app.start()
            logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}")
            raise
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        try:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞: {e}")
            
    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
            available_bots = self.bot_manager.discover_bots()
            running_bots = []
            
            for bot_name in available_bots:
                bot_info = self.bot_manager.get_bot_info(bot_name)
                if bot_info and bot_info.is_running:
                    running_bots.append(bot_name)
            
            message = (
                f"‚úÖ <b>SaldoranSentinelBot –∑–∞–ø—É—â–µ–Ω</b>\n\n"
                f"ü§ñ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–æ—Ç–æ–≤:</b> {len(available_bots)}\n"
                f"üü¢ <b>–ó–∞–ø—É—â–µ–Ω–æ:</b> {len(running_bots)}\n\n"
            )
            
            if available_bots:
                message += "üìã <b>–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:</b>\n"
                for bot_name in available_bots:
                    is_running = bot_name in running_bots
                    status_icon = "üü¢" if is_running else "üî¥"
                    message += f"{status_icon} <code>{bot_name}</code>\n"
            else:
                message += "‚ö†Ô∏è <b>–ë–æ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</b>\n"
                message += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–æ—Ç–æ–≤ –∏ –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ run_bot.sh\n\n"
            
            message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            
            await self.app.bot.send_message(
                chat_id=self.config.TELEGRAM_ADMIN_ID,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            
    async def send_shutdown_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            message = "üîÑ SaldoranSentinelBot –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É..."
            await self.app.bot.send_message(
                chat_id=self.config.TELEGRAM_ADMIN_ID,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            
    async def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            await self.app.bot.send_message(
                chat_id=self.config.TELEGRAM_ADMIN_ID,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == self.config.TELEGRAM_ADMIN_ID
        
    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not self._is_admin(update.effective_user.id):
            return
            
        message = (
            "ü§ñ <b>SaldoranSentinelBot</b>\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not self._is_admin(update.effective_user.id):
            return
            
        message = (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/status - –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/bots - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/resources - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
            "/logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
        )
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            system_stats = await self.resource_monitor.get_system_stats()
            available_bots = self.bot_manager.discover_bots()
            
            message = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"üñ•Ô∏è <b>–†–µ—Å—É—Ä—Å—ã:</b>\n"
                f"CPU: {system_stats['cpu_percent']:.1f}%\n"
                f"RAM: {system_stats['memory_percent']:.1f}%\n\n"
                f"ü§ñ <b>–ë–æ—Ç—ã:</b>\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {len(available_bots)}\n"
            )
            
            if available_bots:
                message += "\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:</b>\n"
                for bot_name in available_bots:
                    message += f"‚Ä¢ {bot_name}\n"
                    
        except Exception as e:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
            
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
        
    async def _cmd_bots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /bots"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            available_bots = self.bot_manager.discover_bots()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –±–æ—Ç–∞—Ö –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ
            running_bots = []
            for bot_name in available_bots:
                bot_info = self.bot_manager.get_bot_info(bot_name)
                if bot_info and bot_info.is_running:
                    running_bots.append(bot_name)
            
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            for bot_name in available_bots:
                is_running = bot_name in running_bots
                status_icon = "üü¢" if is_running else "üî¥"
                action = "stop" if is_running else "start"
                action_text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_running else "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"{status_icon} {bot_name}",
                        callback_data=f"bot_info_{bot_name}"
                    ),
                    InlineKeyboardButton(
                        action_text,
                        callback_data=f"bot_{action}_{bot_name}"
                    )
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Force Restart –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
                if is_running:
                    keyboard.append([
                        InlineKeyboardButton(
                            "üí• Force Restart",
                            callback_data=f"bot_force_restart_{bot_name}"
                    )
                ])
                
            # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard.append([
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bots_refresh")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = (
                f"ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: {len(available_bots)}\n"
                f"–ó–∞–ø—É—â–µ–Ω–æ: {len(running_bots)}\n"
            )
            
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤: {e}",
                parse_mode=ParseMode.HTML
            )
            
    async def _cmd_resources(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /resources"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            stats = await self.resource_monitor.get_system_stats()
            
            message = (
                f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n\n"
                f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                f"CPU: {stats['cpu_percent']:.1f}%\n"
                f"RAM: {stats['memory_percent']:.1f}%\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ RAM: {stats['memory_available_mb']:.0f}MB\n"
                f"–í—Å–µ–≥–æ RAM: {stats['memory_total_mb']:.0f}MB\n\n"
            )
            
            if stats.get('top_processes'):
                message += "üîù <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:</b>\n"
                for proc in stats['top_processes'][:5]:
                    message += f"‚Ä¢ {proc.name} ({proc.username}): {proc.memory_mb:.1f}MB\n"
                    
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="resources_detailed")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="resources_refresh")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}",
                parse_mode=ParseMode.HTML
            )
            
    async def _cmd_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /logs"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
            log_lines = []
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            from datetime import datetime
            today = datetime.now().strftime("%d%m%Y")
            log_file = self.config.LOGS_DIR / f"sentinel_{today}.log"
            
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    log_lines = lines[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            except FileNotFoundError:
                log_lines = ["–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"]
                
            message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:</b>\n\n"
            message += "<code>" + "".join(log_lines) + "</code>"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 4000:
                message = message[:4000] + "...</code>"
                
            await update.message.reply_text(message, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}",
                parse_mode=ParseMode.HTML
            )
    
    async def _cmd_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setup"""
        if not self._is_admin(update.effective_user.id):
            return
            
        message = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="setup_restart")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞", callback_data="setup_status")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="setup_clear_cache")],
            [InlineKeyboardButton("üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤", callback_data="setup_log_level")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if not self._is_admin(query.from_user.id):
            return
            
        data = query.data
        
        try:
            if data.startswith("bot_start_"):
                bot_name = data.replace("bot_start_", "")
                result = self.bot_manager.start_bot(bot_name)
                if result:
                    await query.edit_message_text(
                        f"‚úÖ –ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_name}",
                        parse_mode=ParseMode.HTML
                    )
                    
            elif data.startswith("bot_stop_"):
                bot_name = data.replace("bot_stop_", "")
                result = self.bot_manager.stop_bot(bot_name)
                if result:
                    await query.edit_message_text(
                        f"‚úÖ –ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_name}",
                        parse_mode=ParseMode.HTML
                    )
                    
            elif data.startswith("bot_force_restart_"):
                bot_name = data.replace("bot_force_restart_", "")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç
                stop_result = self.bot_manager.force_stop_bot(bot_name)
                if stop_result:
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                    import asyncio
                    await asyncio.sleep(2)
                    
                    # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
                    start_result = self.bot_manager.start_bot(bot_name)
                    if start_result:
                        await query.edit_message_text(
                            f"üí• –ë–æ—Ç {bot_name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω",
                            parse_mode=ParseMode.HTML
                        )
                    else:
                        await query.edit_message_text(
                            f"üí• –ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å",
                            parse_mode=ParseMode.HTML
                        )
                else:
                    await query.edit_message_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç {bot_name}",
                        parse_mode=ParseMode.HTML
                    )
                    
            elif data.startswith("bot_info_"):
                bot_name = data.replace("bot_info_", "")
                bot_info = self.bot_manager.get_bot_info(bot_name)
                
                if bot_info:
                    message = (
                        f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ {bot_name}</b>\n\n"
                        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if bot_info.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                        f"PID: {bot_info.pid or 'N/A'}\n"
                        f"–ü–∞–º—è—Ç—å: {bot_info.memory_mb:.1f}MB\n" if bot_info.memory_mb else ""
                        f"–ü—É—Ç—å: {bot_info.path}\n"
                    )
                else:
                    message = f"ü§ñ <b>–ë–æ—Ç {bot_name}</b>\n\n–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    
                await query.edit_message_text(message, parse_mode=ParseMode.HTML)
                
            elif data == "bots_refresh":
                # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                available_bots = self.bot_manager.discover_bots()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –±–æ—Ç–∞—Ö –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ
                running_bots = []
                for bot_name in available_bots:
                    bot_info = self.bot_manager.get_bot_info(bot_name)
                    if bot_info and bot_info.is_running:
                        running_bots.append(bot_name)
                
                keyboard = []
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                for bot_name in available_bots:
                    is_running = bot_name in running_bots
                    status_icon = "üü¢" if is_running else "üî¥"
                    action = "stop" if is_running else "start"
                    action_text = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_running else "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
                    
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{status_icon} {bot_name}",
                            callback_data=f"bot_info_{bot_name}"
                        ),
                        InlineKeyboardButton(
                            action_text,
                            callback_data=f"bot_{action}_{bot_name}"
                        )
                    ])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Force Restart –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
                    if is_running:
                        keyboard.append([
                            InlineKeyboardButton(
                                "üí• Force Restart",
                                callback_data=f"bot_force_restart_{bot_name}"
                        )
                    ])
                    
                # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bots_refresh")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                from datetime import datetime
                timestamp = datetime.now().strftime("%H:%M:%S")
                
                message = (
                    f"ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: {len(available_bots)}\n"
                    f"–ó–∞–ø—É—â–µ–Ω–æ: {len(running_bots)}\n"
                    f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
                )
                
                try:
                    await query.edit_message_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )
                
            elif data == "resources_refresh":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ callback
                try:
                    stats = await self.resource_monitor.get_system_stats()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    from datetime import datetime
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    
                    message = (
                        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n\n"
                        f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                        f"CPU: {stats['cpu_percent']:.1f}%\n"
                        f"RAM: {stats['memory_percent']:.1f}%\n"
                        f"–î–æ—Å—Ç—É–ø–Ω–æ RAM: {stats['memory_available_mb']:.0f}MB\n"
                        f"–í—Å–µ–≥–æ RAM: {stats['memory_total_mb']:.0f}MB\n\n"
                    )
                    
                    if stats.get('top_processes'):
                        message += "üîù <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:</b>\n"
                        for proc in stats['top_processes'][:5]:
                            message += f"‚Ä¢ {proc.name} ({proc.username}): {proc.memory_mb:.1f}MB\n"
                    
                    message += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
                    
                    keyboard = [
                        [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="resources_detailed")],
                        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="resources_refresh")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    try:
                        await query.edit_message_text(
                            message,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.message.reply_text(
                            message,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}",
                        parse_mode=ParseMode.HTML
                    )
            
            elif data == "resources_detailed":
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                try:
                    stats = await self.resource_monitor.get_system_stats()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    from datetime import datetime
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    
                    message = (
                        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ - –ü–æ–¥—Ä–æ–±–Ω–æ</b>\n\n"
                        f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                        f"CPU: {stats['cpu_percent']:.1f}%\n"
                        f"RAM: {stats['memory_percent']:.1f}%\n"
                        f"–î–æ—Å—Ç—É–ø–Ω–æ RAM: {stats['memory_available_mb']:.0f}MB\n"
                        f"–í—Å–µ–≥–æ RAM: {stats['memory_total_mb']:.0f}MB\n\n"
                    )
                    
                    if stats.get('top_processes'):
                        message += "üîù <b>–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–∞–º—è—Ç–∏:</b>\n"
                        for proc in stats['top_processes']:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                            message += f"‚Ä¢ {proc.name} ({proc.username}): {proc.memory_mb:.1f}MB\n"
                    
                    message += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
                    
                    keyboard = [
                        [InlineKeyboardButton("üîô –ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥", callback_data="resources_refresh")],
                        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="resources_detailed")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    try:
                        await query.edit_message_text(
                            message,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML
                        )
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.message.reply_text(
                            message,
                            reply_markup=reply_markup,
                            parse_mode=ParseMode.HTML
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}",
                        parse_mode=ParseMode.HTML
                    )
            
            elif data == "setup_restart":
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    await query.edit_message_text(
                        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...",
                        parse_mode=ParseMode.HTML
                    )
                    
                    import subprocess
                    result = subprocess.run(
                        ["sudo", "systemctl", "restart", "saldoran-sentinel"],
                        capture_output=True,
                        text=True,
                        timeout=30
                    )
                    
                    # –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    message = "‚úÖ –°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"
                        
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await query.edit_message_text(
                            message,
                            parse_mode=ParseMode.HTML
                        )
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.message.reply_text(
                            message,
                            parse_mode=ParseMode.HTML
                        )
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
                    # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –æ—à–∏–±–∫–∏
                    import re
                    clean_error = re.sub(r'<[^>]+>', '', str(e))
                    try:
                        await query.edit_message_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {clean_error[:200]}",
                            parse_mode=ParseMode.HTML
                        )
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await query.message.reply_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {clean_error[:200]}",
                            parse_mode=ParseMode.HTML
                        )
            
            elif data == "setup_status":
                # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
                try:
                    import subprocess
                    result = subprocess.run(
                        ["sudo", "systemctl", "status", "saldoran-sentinel", "--no-pager"],
                        capture_output=True,
                        text=True,
                        timeout=10
                    )
                    
                    status_text = result.stdout[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    if len(result.stdout) > 1000:
                        status_text += "..."
                    
                    message = f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:</b>\n\n<code>{status_text}</code>"
                    
                    await query.edit_message_text(
                        message,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}",
                        parse_mode=ParseMode.HTML
                    )
            
            elif data == "setup_clear_cache":
                # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
                try:
                    import subprocess
                    result = subprocess.run(
                        ["sudo", "sync", "&&", "sudo", "echo", "3", ">", "/proc/sys/vm/drop_caches"],
                        shell=True,
                        capture_output=True,
                        text=True,
                        timeout=10
                    )
                    
                    if result.returncode == 0:
                        message = "‚úÖ –ö—ç—à —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—â–µ–Ω!"
                    else:
                        # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –æ—à–∏–±–∫–∏
                        import re
                        clean_error = re.sub(r'<[^>]+>', '', result.stderr)
                        message = f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {clean_error[:200]}"
                        
                    await query.edit_message_text(
                        message,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
                    # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –æ—à–∏–±–∫–∏
                    import re
                    clean_error = re.sub(r'<[^>]+>', '', str(e))
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {clean_error[:200]}",
                        parse_mode=ParseMode.HTML
                    )
            
            elif data == "setup_log_level":
                # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    from .config import Config
                    current_level = Config.LOG_LEVEL
                    
                    levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
                    
                    message = (
                        f"üìù <b>–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <code>{current_level}</code>\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:"
                    )
                    
                    keyboard = []
                    for level in levels:
                        if level == current_level:
                            button_text = f"‚úÖ {level}"
                        else:
                            button_text = f"   {level}"
                        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"log_level_{level}")])
                    
                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="setup_back")])
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}",
                        parse_mode=ParseMode.HTML
                    )
            
            elif data == "setup_back":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é setup
                message = (
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="setup_restart")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞", callback_data="setup_status")],
                    [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="setup_clear_cache")],
                    [InlineKeyboardButton("üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤", callback_data="setup_log_level")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.HTML
                )
            
            elif data.startswith("log_level_"):
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    new_level = data.replace("log_level_", "")
                    from .config import Config
                    current_level = Config.LOG_LEVEL
                    
                    if new_level == current_level:
                        message = f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <code>{current_level}</code>"
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        import os
                        import subprocess
                        from pathlib import Path
                        
                        # –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        env_file = Path(__file__).parent.parent / '.env'
                        
                        try:
                            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
                            env_content = ""
                            if env_file.exists():
                                with open(env_file, 'r', encoding='utf-8') as f:
                                    env_content = f.read()
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º LOG_LEVEL
                            lines = env_content.split('\n')
                            updated = False
                            for i, line in enumerate(lines):
                                if line.startswith('LOG_LEVEL='):
                                    lines[i] = f'LOG_LEVEL={new_level}'
                                    updated = True
                                    break
                            
                            if not updated:
                                lines.append(f'LOG_LEVEL={new_level}')
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
                            with open(env_file, 'w', encoding='utf-8') as f:
                                f.write('\n'.join(lines))
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–∏
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω .env —Ñ–∞–π–ª: {env_file}")
                            logger.info(f"–ù–æ–≤—ã–π LOG_LEVEL: {new_level}")
                            env_content = '\n'.join(lines)
                            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env: {repr(env_content)}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                            os.environ['LOG_LEVEL'] = new_level
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                            logger.update_log_level()
                            
                            message = (
                                f"üìù <b>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                                f"–ë—ã–ª–æ: <code>{current_level}</code>\n"
                                f"–°—Ç–∞–ª–æ: <code>{new_level}</code>\n\n"
                                f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª\n"
                                f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
                                f"üéâ <b>–ì–æ—Ç–æ–≤–æ!</b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ä–∞–∑—É."
                            )
                        except Exception as env_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {env_error}")
                            message = (
                                f"üìù <b>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
                                f"–ë—ã–ª–æ: <code>{current_level}</code>\n"
                                f"–°—Ç–∞–ª–æ: <code>{new_level}</code>\n\n"
                                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞.\n"
                                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.\n\n"
                                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ .env —Ñ–∞–π–ª, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
                            )
                    
                    keyboard = [
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="setup_back")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}",
                        parse_mode=ParseMode.HTML
                    )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ –æ—à–∏–±–∫–∏
            import re
            clean_error = re.sub(r'<[^>]+>', '', str(e))
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {clean_error[:200]}",
                parse_mode=ParseMode.HTML
            )