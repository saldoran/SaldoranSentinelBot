"""
Telegram-–±–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SaldoranBotSentinel
"""

import asyncio
from typing import Dict, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from .config import Config
from .bot_manager import BotManager, BotInfo
from .resource_monitor import ResourceMonitor
from .logger import logger


class SentinelTelegramBot:
    """Telegram-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SaldoranBotSentinel"""
    
    def __init__(self, bot_manager: BotManager, resource_monitor: ResourceMonitor):
        self.bot_manager = bot_manager
        self.resource_monitor = resource_monitor
        self.admin_id = Config.TELEGRAM_ADMIN_ID
        self.application = None
        
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == self.admin_id
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        welcome_text = (
            "ü§ñ **SaldoranBotSentinel** –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `/list` - –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º\n"
            "‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ—Å—É—Ä—Å–æ–≤\n"
            "‚Ä¢ `/monitor` - –û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ `/cleanup` - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏\n"
            "‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )
        
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not self._is_admin(update.effective_user.id):
            return
            
        help_text = (
            "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
            "ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏:**\n"
            "‚Ä¢ `/list` - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∏: ‚ñ∂Ô∏è/‚èπÔ∏è (–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø), üîÑ (–†–µ—Å—Ç–∞—Ä—Ç), ‚ÑπÔ∏è (–ò–Ω—Ñ–æ)\n\n"
            "üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:**\n"
            "‚Ä¢ `/status` - –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ `/monitor` - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ `/cleanup` - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏\n\n"
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º CPU: {Config.MAX_CPU_PERCENT}%\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º—É–º —Å–≤–æ–±–æ–¥–Ω–æ–π RAM: {Config.MIN_FREE_RAM_MB}MB\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {Config.MONITORING_INTERVAL}—Å"
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def list_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            bots_info = self.bot_manager.get_all_bots_info()
            
            if not bots_info:
                await update.message.reply_text(
                    "üì≠ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: `{Config.BOTS_DIR}`",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–æ—Ç–æ–≤
            message_text = "ü§ñ **–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:**\n\n"
            
            for bot_info in bots_info:
                status_emoji = "üü¢" if bot_info.is_running else "üî¥"
                status_text = "–ó–∞–ø—É—â–µ–Ω" if bot_info.is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                
                message_text += f"{status_emoji} **{bot_info.name}** - {status_text}\n"
                
                if bot_info.is_running and bot_info.pid:
                    message_text += f"   PID: {bot_info.pid}"
                    if bot_info.memory_mb:
                        message_text += f", RAM: {bot_info.memory_mb:.1f}MB"
                    message_text += "\n"
                
                message_text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
            keyboard = []
            for bot_info in bots_info:
                row = []
                
                # –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø
                if bot_info.is_running:
                    row.append(InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data=f"stop_{bot_info.name}"))
                else:
                    row.append(InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"start_{bot_info.name}"))
                
                # –ö–Ω–æ–ø–∫–∞ –†–µ—Å—Ç–∞—Ä—Ç
                row.append(InlineKeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç", callback_data=f"restart_{bot_info.name}"))
                
                # –ö–Ω–æ–ø–∫–∞ –ò–Ω—Ñ–æ
                row.append(InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"info_{bot_info.name}"))
                
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_list")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /list: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            stats = self.resource_monitor.get_system_stats()
            bots_info = self.bot_manager.get_all_bots_info()
            
            running_bots = sum(1 for bot in bots_info if bot.is_running)
            total_bots = len(bots_info)
            
            status_text = (
                f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
                f"üñ•Ô∏è **CPU:** {stats.cpu_percent:.1f}%\n"
                f"üíæ **–ü–∞–º—è—Ç—å:** {stats.memory_percent:.1f}% "
                f"({stats.memory_available_mb:.0f}MB —Å–≤–æ–±–æ–¥–Ω–æ)\n"
                f"ü§ñ **–ë–æ—Ç—ã:** {running_bots}/{total_bots} –∑–∞–ø—É—â–µ–Ω–æ\n\n"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            memory_critical = self.resource_monitor.check_memory_critical()
            cpu_critical, _ = self.resource_monitor.check_cpu_critical()
            
            if memory_critical or cpu_critical:
                status_text += "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:**\n"
                if memory_critical:
                    status_text += "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –ø–∞–º—è—Ç–∏!\n"
                if cpu_critical:
                    status_text += "üî¥ –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU!\n"
            else:
                status_text += "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            
            await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")
    
    async def monitor_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitor - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            report = self.resource_monitor.get_monitoring_report()
            await update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /monitor: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    
    async def cleanup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cleanup - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        if not self._is_admin(update.effective_user.id):
            return
            
        try:
            await update.message.reply_text("üßπ –ó–∞–ø—É—Å–∫–∞—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏...")
            
            success = self.resource_monitor.emergency_memory_cleanup()
            
            if success:
                stats = self.resource_monitor.get_system_stats()
                result_text = (
                    f"‚úÖ **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                    f"üíæ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {stats.memory_available_mb:.0f}MB\n"
                    f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats.memory_percent:.1f}%"
                )
            else:
                result_text = "‚ùå **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞!**\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
            
            await update.message.reply_text(result_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /cleanup: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if not self._is_admin(query.from_user.id):
            return
            
        try:
            callback_data = query.data
            action, bot_name = callback_data.split('_', 1)
            
            if action == "start":
                await self._handle_start_bot(query, bot_name)
            elif action == "stop":
                await self._handle_stop_bot(query, bot_name)
            elif action == "restart":
                await self._handle_restart_bot(query, bot_name)
            elif action == "info":
                await self._handle_bot_info(query, bot_name)
            elif callback_data == "refresh_list":
                await self._handle_refresh_list(query)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")
    
    async def _handle_start_bot(self, query, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        await query.edit_message_text(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ {bot_name}...")
        
        success = self.bot_manager.start_bot(bot_name)
        
        if success:
            await query.edit_message_text(f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        else:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_name}")
    
    async def _handle_stop_bot(self, query, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        await query.edit_message_text(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ {bot_name}...")
        
        success = self.bot_manager.stop_bot(bot_name)
        
        if success:
            await query.edit_message_text(f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_name}")
    
    async def _handle_restart_bot(self, query, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        await query.edit_message_text(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ {bot_name}...")
        
        success = self.bot_manager.restart_bot(bot_name)
        
        if success:
            await query.edit_message_text(f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        else:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_name}")
    
    async def _handle_bot_info(self, query, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        bot_info = self.bot_manager.get_bot_info(bot_name)
        
        if not bot_info:
            await query.edit_message_text(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ {bot_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        info_text = f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ {bot_name}:**\n\n"
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = "üü¢" if bot_info.is_running else "üî¥"
        status_text = "–ó–∞–ø—É—â–µ–Ω" if bot_info.is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        info_text += f"**–°—Ç–∞—Ç—É—Å:** {status_emoji} {status_text}\n"
        
        # PID –∏ —Ä–µ—Å—É—Ä—Å—ã
        if bot_info.is_running and bot_info.pid:
            info_text += f"**PID:** {bot_info.pid}\n"
            
            if bot_info.cpu_percent is not None:
                info_text += f"**CPU:** {bot_info.cpu_percent:.1f}%\n"
                
            if bot_info.memory_mb is not None:
                info_text += f"**RAM:** {bot_info.memory_mb:.1f}MB\n"
        
        # –†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤
        if bot_info.logs_size_mb is not None:
            info_text += f"**–†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤:** {bot_info.logs_size_mb:.1f}MB\n"
        
        # Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if bot_info.last_commit:
            info_text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:** `{bot_info.last_commit}`\n"
            
        if bot_info.last_commit_date:
            info_text += f"**–î–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞:** {bot_info.last_commit_date}\n"
        
        # –ü—É—Ç—å –∫ –±–æ—Ç—É
        info_text += f"**–ü—É—Ç—å:** `{bot_info.path}`"
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="refresh_list")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            info_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def _handle_refresh_list(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
        try:
            bots_info = self.bot_manager.get_all_bots_info()
            
            if not bots_info:
                await query.edit_message_text(
                    "üì≠ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: `{Config.BOTS_DIR}`",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = "ü§ñ **–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:** (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
            
            for bot_info in bots_info:
                status_emoji = "üü¢" if bot_info.is_running else "üî¥"
                status_text = "–ó–∞–ø—É—â–µ–Ω" if bot_info.is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                
                message_text += f"{status_emoji} **{bot_info.name}** - {status_text}\n"
                
                if bot_info.is_running and bot_info.pid:
                    message_text += f"   PID: {bot_info.pid}"
                    if bot_info.memory_mb:
                        message_text += f", RAM: {bot_info.memory_mb:.1f}MB"
                    message_text += "\n"
                
                message_text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            for bot_info in bots_info:
                row = []
                
                if bot_info.is_running:
                    row.append(InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data=f"stop_{bot_info.name}"))
                else:
                    row.append(InlineKeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", callback_data=f"start_{bot_info.name}"))
                
                row.append(InlineKeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç", callback_data=f"restart_{bot_info.name}"))
                row.append(InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"info_{bot_info.name}"))
                
                keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_list")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤.")
    
    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("list", self.list_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("monitor", self.monitor_command))
        self.application.add_handler(CommandHandler("cleanup", self.cleanup_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("Telegram-–±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
        if not self.application:
            self.setup_application()
            
        logger.info("–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-–±–æ—Ç–∞"""
        if self.application:
            logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Telegram-–±–æ—Ç–∞...")
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            logger.info("Telegram-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")