"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å SaldoranBotSentinel
"""

import asyncio
import signal
import sys
from typing import Optional
from datetime import datetime

from .config import Config
from .logger import logger
from .bot_manager import BotManager
from .resource_monitor import ResourceMonitor
from .telegram_bot import SentinelTelegramBot


class SentinelService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å SaldoranBotSentinel"""
    
    def __init__(self):
        self.bot_manager: Optional[BotManager] = None
        self.resource_monitor: Optional[ResourceMonitor] = None
        self.telegram_bot: Optional[SentinelTelegramBot] = None
        self.monitoring_task: Optional[asyncio.Task] = None
        self.running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SaldoranBotSentinel...")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            Config.validate()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            Config.create_directories()
            logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.bot_manager = BotManager()
            logger.info("‚úÖ BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.resource_monitor = ResourceMonitor()
            logger.info("‚úÖ ResourceMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.telegram_bot = SentinelTelegramBot(self.bot_manager, self.resource_monitor)
            self.telegram_bot.setup_application()
            logger.info("‚úÖ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def start_monitoring_loop(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {Config.MONITORING_INTERVAL}—Å)")
        
        while self.running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                monitoring_result = self.resource_monitor.monitor_resources()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                actions = monitoring_result.get('actions_taken', [])
                if actions:
                    logger.warning(f"–í—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {', '.join(actions)}")
                
                # –ï—Å–ª–∏ –±—ã–ª–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                if 'emergency_memory_cleanup' in actions:
                    await self._notify_admin_emergency_cleanup(monitoring_result)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(Config.MONITORING_INTERVAL)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(Config.MONITORING_INTERVAL)
    
    async def _notify_admin_emergency_cleanup(self, monitoring_result):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏"""
        try:
            if self.telegram_bot and self.telegram_bot.application:
                stats = monitoring_result['stats']
                timestamp = monitoring_result['timestamp']
                
                message = (
                    f"üö® **–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–ê–ú–Ø–¢–ò**\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {timestamp.strftime('%H:%M:%S %d.%m.%Y')}\n"
                    f"üíæ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {stats.memory_available_mb:.0f}MB\n"
                    f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {stats.memory_percent:.1f}%\n\n"
                    f"–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã-–ø–æ–∂–∏—Ä–∞—Ç–µ–ª–∏ –ø–∞–º—è—Ç–∏ "
                    f"–∏ –æ—á–∏—Å—Ç–∏–ª–∞ –∫—ç—à."
                )
                
                await self.telegram_bot.application.bot.send_message(
                    chat_id=Config.TELEGRAM_ADMIN_ID,
                    text=message,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            self.running = True
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ SaldoranBotSentinel...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
            await self.telegram_bot.start_bot()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            self.monitoring_task = asyncio.create_task(self.start_monitoring_loop())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self._notify_startup()
            
            logger.info("‚úÖ SaldoranBotSentinel —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            await self.monitoring_task
            
        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            await self.stop()
            raise
    
    async def _notify_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if self.telegram_bot and self.telegram_bot.application:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                stats = self.resource_monitor.get_system_stats()
                bots_info = self.bot_manager.get_all_bots_info()
                
                running_bots = sum(1 for bot in bots_info if bot.is_running)
                total_bots = len(bots_info)
                
                startup_message = (
                    f"üü¢ **SaldoranBotSentinel –∑–∞–ø—É—â–µ–Ω!**\n\n"
                    f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
                    f"üñ•Ô∏è CPU: {stats.cpu_percent:.1f}%\n"
                    f"üíæ –ü–∞–º—è—Ç—å: {stats.memory_percent:.1f}% "
                    f"({stats.memory_available_mb:.0f}MB —Å–≤–æ–±–æ–¥–Ω–æ)\n"
                    f"ü§ñ –ë–æ—Ç—ã: {running_bots}/{total_bots} –∑–∞–ø—É—â–µ–Ω–æ\n\n"
                    f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∂–¥—ã–µ {Config.MONITORING_INTERVAL}—Å"
                )
                
                await self.telegram_bot.application.bot.send_message(
                    chat_id=Config.TELEGRAM_ADMIN_ID,
                    text=startup_message,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SaldoranBotSentinel...")
        
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.monitoring_task and not self.monitoring_task.done():
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram-–±–æ—Ç–∞
        if self.telegram_bot:
            await self.telegram_bot.stop_bot()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await self._notify_shutdown()
        
        logger.info("‚úÖ SaldoranBotSentinel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _notify_shutdown(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if self.telegram_bot and self.telegram_bot.application:
                shutdown_message = (
                    f"üî¥ **SaldoranBotSentinel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                    f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}\n"
                    f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                )
                
                await self.telegram_bot.application.bot.send_message(
                    chat_id=Config.TELEGRAM_ADMIN_ID,
                    text=shutdown_message,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
sentinel_service = SentinelService()


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–∞
    loop.create_task(sentinel_service.stop())


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        await sentinel_service.start()
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await sentinel_service.stop()
    except Exception as e:
        logger.critical(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await sentinel_service.stop()
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)